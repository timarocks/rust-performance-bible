name: Benchmark Suite

on:
  push:
    branches: [ main ]
    paths:
      - 'benchmarks/**'
      - 'book/**'
      - 'patterns/**'
      - 'Cargo.toml'
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      baseline:
        description: 'Baseline branch/tag to compare against'
        required: false
        default: 'main'

env:
  CARGO_TERM_COLOR: always
  RUSTFLAGS: "-C target-cpu=native"
  CARGO_INCREMENTAL: 0
  CARGO_NET_RETRY: 5
  RUST_BACKTRACE: full

jobs:
  benchmark:
    name: Run Benchmarks (${{ matrix.os }}, ${{ matrix.rust }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest]
        rust: [stable, nightly]
        include:
          - os: ubuntu-latest
            cache-key: ubuntu-latest
          - os: macos-latest
            cache-key: macos-latest
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Need full history for comparisons
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: ${{ matrix.rust }}
        components: rustfmt, clippy
    
    - name: Cache cargo registry and index
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ matrix.cache-key }}-${{ matrix.rust }}-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ matrix.cache-key }}-${{ matrix.rust }}-
          ${{ matrix.cache-key }}-
    
    - name: Install benchmark tools
      run: |
        if [ "${{ matrix.rust }}" = "nightly" ]; then
          cargo install cargo-criterion --locked || true
        fi
        cargo install criterion --features=html_reports --locked || true
    
    - name: Run benchmarks
      run: |
        cd benchmarks
        if [ "${{ matrix.rust }}" = "nightly" ]; then
          cargo criterion --no-fail-fast --message-format=json | tee benchmark-results.json
        else
          cargo bench --no-fail-fast -- --output-format=json | tee benchmark-results.json
        fi
    
    - name: Upload benchmark results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: benchmark-results-${{ matrix.os }}-${{ matrix.rust }}
        path: benchmarks/benchmark-results.json
        if-no-files-found: warn
        retention-days: 1

  benchmark-history:
    name: Track Benchmark History
    needs: benchmark
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Download benchmark results
      uses: actions/download-artifact@v4
      with:
        path: benchmark-results
    
    - name: Process benchmark results
      run: |
        echo "Processing benchmark results..."
        # Create a summary of the results
        echo "## Benchmark Results Summary" > summary.md
        echo "### $(date -u +'%Y-%m-%d %H:%M:%S UTC')" >> summary.md
        echo "" >> summary.md
        
        # Process each result file
        for file in benchmark-results/*.json; do
          if [ -f "$file" ]; then
            echo "### $(basename "$file")" >> summary.md
            echo '```' >> summary.md
            jq -r '.benchmarks[] | "\(.name): \(.mean.time) \(.mean.unit)"' "$file" 2>/dev/null || \
              echo "No benchmark data found in $file" >> summary.md
            echo '```' >> summary.md
            echo "" >> summary.md
          fi
        done
        
        # Check if we have any results
        if [ ! -s summary.md ]; then
          echo "No benchmark results found" > summary.md
        fi
    
    - name: Upload results summary
      uses: actions/upload-artifact@v4
      with:
        name: benchmark-summary
        path: summary.md
        retention-days: 7
    
    - name: Create GitHub Release with results
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      uses: softprops/action-gh-release@v2
      with:
        files: |
          benchmark-results/*.json
          summary.md
        body_path: summary.md
        generate_release_notes: true
        prerelease: false
    
    - name: Update benchmark history
      run: |
        # Create a directory for benchmark history
        mkdir -p benchmark-history
        
        # Process each result file
        for file in benchmark-results/*.json; do
          if [ -f "$file" ]; then
            # Generate a filename with timestamp
            timestamp=$(date -u +"%Y%m%dT%H%M%SZ")
            base_name=$(basename "${file%.*}")
            cp "$file" "benchmark-history/${base_name}_${timestamp}.json"
            
            # Update the index
            echo "- [${base_name} ${timestamp}](${base_name}_${timestamp}.json)" >> benchmark-history/index.md
          fi
        done
        
        # Sort the index file for better readability
        if [ -f "benchmark-history/index.md" ]; then
          sort -r benchmark-history/index.md -o benchmark-history/index.md
        fi
        
        # Configure git and commit changes
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        # Only commit if there are changes
        git add benchmark-history/
        git diff --quiet && git diff --staged --quiet || \
          (git commit -m "Update benchmark history [skip ci]" && git push)

  benchmark-dashboard:
    name: Generate Performance Dashboard
    needs: benchmark
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Download benchmark results
      uses: actions/download-artifact@v4
      with:
        path: benchmark-results
    
    - name: Generate dashboard
      run: |
        # Create a simple HTML dashboard
        echo "<!DOCTYPE html>" > dashboard.html
        echo "<html>" >> dashboard.html
        echo "<head>" >> dashboard.html
        echo "  <title>Rust Performance Benchmarks</title>" >> dashboard.html
        echo "  <style>" >> dashboard.html
        echo "    body { font-family: Arial, sans-serif; margin: 20px; }" >> dashboard.html
        echo "    .benchmark { margin-bottom: 20px; padding: 15px; border: 1px solid #ddd; border-radius: 5px; }" >> dashboard.html
        echo "    .benchmark h3 { margin-top: 0; }" >> dashboard.html
        echo "    pre { background: #f5f5f5; padding: 10px; border-radius: 3px; overflow-x: auto; }" >> dashboard.html
        echo "  </style>" >> dashboard.html
        echo "</head>" >> dashboard.html
        echo "<body>" >> dashboard.html
        echo "  <h1>Rust Performance Benchmarks</h1>" >> dashboard.html
        echo "  <p>Last updated: $(date -u +'%Y-%m-%d %H:%M:%S UTC')</p>" >> dashboard.html
        
        # Process each result file
        for file in benchmark-results/*.json; do
          if [ -f "$file" ]; then
            filename=$(basename "$file")
            echo "  <div class=\"benchmark\">" >> dashboard.html
            echo "    <h3>${filename}</h3>" >> dashboard.html
            echo "    <pre>" >> dashboard.html
            jq -r '.benchmarks[] | "\(.name): \(.mean.time) \(.mean.unit)"' "$file" 2>/dev/null | \
              sed 's/&/\&amp;/g; s/</\&lt;/g; s/>/\&gt;/g' >> dashboard.html || \
              echo "No benchmark data found in $file" >> dashboard.html
            echo "    </pre>" >> dashboard.html
            echo "  </div>" >> dashboard.html
          fi
        done
        
        echo "</body>" >> dashboard.html
        echo "</html>" >> dashboard.html
        
        # Create a simple markdown version as well
        echo "# Rust Performance Benchmarks" > dashboard.md
        echo "" >> dashboard.md
        echo "Last updated: $(date -u +'%Y-%m-%d %H:%M:%S UTC')" >> dashboard.md
        echo "" >> dashboard.md
        
        for file in benchmark-results/*.json; do
          if [ -f "$file" ]; then
            echo "## $(basename "$file")" >> dashboard.md
            echo '```' >> dashboard.md
            jq -r '.benchmarks[] | "\(.name): \(.mean.time) \(.mean.unit)"' "$file" 2>/dev/null || \
              echo "No benchmark data found in $file" >> dashboard.md
            echo '```' >> dashboard.md
            echo "" >> dashboard.md
          fi
        done
        
        # Create a directory for the dashboard
        mkdir -p public
        mv dashboard.html public/index.html
        mv dashboard.md public/README.md
    
    - name: Deploy to GitHub Pages
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./public
        keep_files: false
        force_orphan: true
